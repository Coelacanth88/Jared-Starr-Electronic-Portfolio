<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Keeps up with whether or not the object is clicked while
//inside the inventory
clicked = false
//Keeps up with the object's original x inside the inventory
originalx = x
//Keeps up with the object's original y inside the inventory
originaly = y
//Is true if the object is inside the inventory else false
insideinventory = false
//Keeps up with the inventory slot the object occupies
inventoryNumber = 0
//Keeps up with the size of the list the objects are inside of
list_size = 0
//Sets i to 0 for the for loop
i = 0
//Keeps up with how many times the object has been clicked
clickCount = 0
//Keeps with whether or not the object is over the spot where
//it can be used
collision = false
//Keeps up with which object is nearest to the mouse inside the inventory
nearest = 0

rightClickCount = 0

viewed = false

new = keySprite
old = keySprite
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if the object is clicked and inside the inventory then it makes the nearest object
//follow the mouse
if(object_index.clicked == true and object_index.insideinventory == true) {
    nearest.x = mouse_x
    nearest.y = mouse_y
   
}
//if the left mouse button is pressed then list_size is initialized to the object_list
//size
list_size = (ds_list_size(inventoryArrayMaker.object_list))
ds_list_sort(inventoryArrayMaker.object_deleted_list, true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//sets clicked to false so that the object will not follow the mouse
object_index.clicked = false
//if the collision is true with the hotSpot
if(collision == true) {
    //It adds the object's old inventory spot into the object_deleted_list
    ds_list_add(inventoryArrayMaker.object_deleted_list, object_index.inventoryNumber)
    //It deletes the object from the object_list that keeps up with the inventory
    ds_list_delete(inventoryArrayMaker.object_list, object_index.inventoryNumber - 1)
    //It destroys the object after the mouse button is released
    instance_destroy()
    //Sets the object's persistent to false
    object_index.persistent = false
    //Sets insideinventory to false because the object is deleted
    object_index.insideinventory = false 
    //sorts the object_deleted_list so that the next object clicked will go to the
    //first empty inventory spot
    ds_list_sort(inventoryArrayMaker.object_deleted_list, true)
}
//if the collision with the hotSpot is false
else if(collision == false){ //and viewed == false) {
    //then the object goes back to it's spot inside the inventory
    object_index.x = object_index.originalx
    object_index.y = object_index.originaly
}
//Sets nearest to 0 after the object is deleted or moved back inside the inventory
nearest = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//cardoriginalxscale = 0.1
//cardoriginalyscale = 0.1
if(insideinventory == true) {
    if(rightClickCount == 0) {
        //image_index += 1
        //image_xscale = 0.9
        //image_yscale = 0.9
        sprite_index = new
        y = (room_height / 2)
        x = (room_width / 2)
        viewed = true
    }
    if(rightClickCount == 1) {
        sprite_index = old
       // if(object_index == card) {
            //image_xscale = cardoriginalxscale
            //image_yscale = cardoriginalyscale
        //image_index += 1
        x = originalx
        y = originaly
        rightClickCount = -1
        viewed = false
    }
    rightClickCount += 1
}

visible = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// if the object is outside the inventory and the list_size is greater than 8
//then add the object to the list and set insideinventory to false and set clicked to false
if(visible = true){ //and viewed == false) {
    if(distance_to_object(object_mouse) &lt; 50) {
        if((x &gt;513  or x &lt; 170) or (y &gt; 25) and list_size &lt; 8) {
            ds_list_add(inventoryArrayMaker.object_list, object_index)
            object_index.insideinventory = false
            object_index.clicked = false
        }
        //// if the object is outside the inventory and the list_size is greater than 8
        if(x &gt; 513 or x &lt; 170 or y &gt; 25 and list_size &lt; 8) {
                //and if the object_deleted_list is not empty
                if(ds_list_size(inventoryArrayMaker.object_deleted_list) &gt; 0) {
                    //for every object in the object_deleted list
                    var i = 0;
                    for(i = 0; i &lt; ds_list_size(inventoryArrayMaker.object_deleted_list); i+= 1) {
                        //put the object in the inventory at the right x
                        object_index.x = box_array[ds_list_find_value(inventoryArrayMaker.object_deleted_list, i)].x
                        //put the object in the inventory at the right y
                        object_index.y = box_array[ds_list_find_value(inventoryArrayMaker.object_deleted_list, i)].y
                        //set the object's originalx to the x inside the inventory so that when it is
                        //dragged somewhere where you cannot use it it goes back to it's spot
                        object_index.originalx = box_array[ds_list_find_value(inventoryArrayMaker.object_deleted_list, i)].x
                        //sets the object's originaly to the y inside the inventory
                        object_index.originaly = box_array[ds_list_find_value(inventoryArrayMaker.object_deleted_list, i)].y
                        //changes the images yscale so that it will fit inside the inventory
                        //object_index.image_yscale = 0.085
                        //changes the images xscale so that it will fit inside the inventory
                        //object_index.image_xscale = 0.085
                        //sets the object's inventoryNumber to the inventory spot that it occupies
                        object_index.inventoryNumber = ds_list_find_value(inventoryArrayMaker.object_deleted_list, i)
                        //deletes the object just put into the inventory from the 
                        //object_deleted_list since that spot is now taken
                        ds_list_delete(inventoryArrayMaker.object_deleted_list, i)
                    }
                }
                //else if the object_deleted_list is empty and the list_size is less than 8
                //it places the object in the next spot in the inventory
                else if(ds_list_size(inventoryArrayMaker.object_deleted_list) == 0 and list_size &lt; 8) {
                    //sets the object's x to the inventory's x
                    object_index.x = box_array[list_size].x
                    //sets the object's x to the inventory's y
                    object_index.y = box_array[list_size].y
                    //sets the object's originalx to it's inventory spot's x
                    object_index.originalx = box_array[list_size].x
                    //sets the object's originalx to it's inventory spot's y
                    object_index.originaly = box_array[list_size].y
                    //changes the object's yscale so that it fits inside the inventory
                    //object_index.image_yscale = 0.085
                    //changes the object's xscale so that it fits inside the inventory
                    //object_index.image_xscale = 0.085
                    //sets the object's inventoryNumber to it's spot inside the inventory
                    object_index.inventoryNumber = list_size
                }
        }
        //if the object is inside the inventory
        if(object_index.x &lt;= 513 and object_index.x &gt;= 170 and object_index.y == 25) {
            //the object's insideinventory is set to true
            object_index.insideinventory = true
            //persistent is equal to true
            persistent = true
           
        }
        //if the object is inside the inventory and the object has been clicked more than 1
        if(object_index.insideinventory == true and object_index.clickCount &gt;= 1) {
            //it sets the nearest to the object nearest the mouse inside the inventory
            nearest = instance_nearest(mouse_x, mouse_y, objectParent)
            //it sets the object's clicked to true so that you can drag the object
            object_index.clicked = true
        }
        
        //incerements the clickCount for the object
        object_index.clickCount +=1
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room != credits1 and room != credits2 and room != credits3 and room != credits4 and room != credits5{//draws every object
draw_self()
//if the mouse is over the object and the object is inside the inventory

if(position_meeting(x, y, object_mouse) and object_index.insideinventory == true) {
    //This draws a white rectangle
    draw_set_color(c_white)
    draw_rectangle(mouse_x+100,mouse_y-20,mouse_x,mouse_y,
    false)
        //This draws the objects name inside the inventory
        draw_set_color(c_black)
        draw_text(mouse_x,mouse_y -20,object_get_name(object_index))
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
