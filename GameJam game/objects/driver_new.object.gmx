<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>driverSpriteRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//mode = 'blue' //megamans default attack
normalSpeed = 7
state = "standingRight"  //naturally spawn facing right because level progression is always to the right
jumpStrength = -20
myGravity = 2  //these two combine to almost perfectly mimic the original MM's jumping prowess
//invinTimer = 0 //timer variable for when MM takes damage.  
//respawnTimer = 90 //used to give 3 seconds between death and restart
//spawnTimer = 90
maxFallSpeed = 4
image_speed = .3
direction = 0

testHealth = 100
bulletTime = 0
shoot = true
invin = false
invinT = 90
nomD = 25
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var org = 60
//heavy use of states for megaman.
/*
invinTimer -= 1

if invinTimer &lt;= 0
{
    invinTimer = 0  //keeps invinTimer from reaching crazy number
}*/
if state == "standingRight"  //no movement facing right
{
    sprite_index = driverSpriteRight //if the sprite isn't changed each time he will stay in a running image
    speed = 0
    direction = 0
}

if state == "standingLeft"  //no movement facing left
{
    sprite_index = driverSpriteLeft
    speed = 0
}

if state == "jumpingLeft"  //jumping left
    sprite_index = jumpLeftSprite


if state == "jumpingRight"  //jumping right
    sprite_index = jumpRightSprite


if state == "runningLeft" //running to the left
{
   sprite_index = runningLeftSprite
   image_speed = .25
   
}
if state == "runningRight" //running to the right
{
    sprite_index = runningRightSprite
    image_speed = .25
}


if (invin){
    if invinT &gt; 0{
        invinT -= 1
    }
    
    if invinT &lt;= 0{
        invinT = org
        invin = false
    }
}
/*if state == "dead"
{
    sprite_index = explosionSprite
    image_speed = .05
    vspeed = -2 //counters the odd gravity that megaman has when changing into the explosion sprite
    hspeed = 0 //no movement left or right
    audio_stop_sound(shootSound) //keeps the shooting sound from happening when megaman dies
}
*/
if (keyboard_check_pressed(vk_up))  //jump animation depends on which direction your facing
{
    if state == "standingLeft" 
    or state == "runningLeft" 
    //or state == "shootingLeft" //if facing left, jump to the left
    {  
        state = "jumpingLeft"
        vspeed = jumpStrength
    }
    if state == "standingRight" 
    or state == "runningRight" 
    //or state == "shootingRight" //if facing right, jump to the right
    {  
        state = "jumpingRight"
        vspeed = jumpStrength
    }
}

if(keyboard_check_released(vk_up))
{
    if (state == "jumpingLeft"
    or state == "jumpingRight")  //all of this code allows for the height of the jump to be determined by how long space is pressed. 
    and vspeed &lt;= 0
    {
        vspeed = 0  //if you release space while jumping your vspeed becomes zero UNLESS your vspeed is less than zero.  If falling, nothing happens
    }
}

if (!place_free(x+hspeed, y)) 
{ // i'm about to collide left or right
    move_outside_solid((direction+180)%360, 10) // keeps megaman out of walls based on the direction he is facing when contacting them.
    hspeed = 0
}
if (!place_free(x, y+vspeed)) 
{ // i'm about to collide up or down
    move_outside_solid(90,10)
    vspeed = 0
    //move_outside_solid(90,5)
}
if (!place_free(x, y+5)) { // keep me from sinking into the ground
    if (!keyboard_check_pressed(vk_up) and state == "jumpingLeft") 
    { 
        state = "standingLeft" 
        //audio_play_sound(landingSound, 1, false) //plays the landing sound when megaman comes into contact with the ground after being in the jump state
    }
    if (!keyboard_check_pressed(vk_up) and state == "jumpingRight") 
    { 
        state = "standingRight" 
       // audio_play_sound(landingSound, 1, false)
    }
}
else 
{
    if state == "standingLeft" 
    { 
        state = "jumpingLeft" 
    }
    if state == "standingRight" 
    { 
        state = "jumpingRight" 
    }

vspeed += myGravity  // obey gravity  
}
hspeed *= .95
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Above: movement. Below: Bullet</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var org = 6

if (!shoot){
    bulletTime -= 1
}

if bulletTime &lt;= 0{
    shoot = true
    bulletTime = org
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!object_exists(obj_fade)) exit

else{
    with obj_fade{
    start = true
    timer = 0
    x = obj_door.x
    y = obj_door.y
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hit">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!invin){
health -= nomD
invin = true
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="leg">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!invin){
    health -= nomD
    invin = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="zombie1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if zombie1.state == "jumpingRight" or zombie1.state == "jumpingLeft"{
    if (!invin){
        health -= nomD
        invin = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == "standingLeft" 
or state == "standingRight" 
or state == "runningLeft" 
or state == "runningRight"
//or state == "shootingRight" 
//or state == "shootingLeft"  //for comments see keyboard left event
{
    state = "runningRight"
    hspeed = normalSpeed
    direction = 0
    if(place_free(x,y+15))
    {
        state = "jumpingRight"
    }
}
if state == "jumpingLeft" 
or state == "jumpingRight"
{
    state = "jumpingRight"
    hspeed = normalSpeed
    //direction = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == "standingLeft" 
or state == "standingRight" 
or state == "runningLeft" 
or state == "runningRight"
//or state == "shootingRight" 
//or state == "shootingLeft"   //all possible states for this action
{
    state = "runningLeft" //no matter what you're doing, hitting left will move MM into a left run
    hspeed = -normalSpeed
    direction = 180
    if(place_free(x, y+15))  //if there is no object under MM's feet he will fall
    {
        state = "jumpingLeft"  //moving left off a platform will cause MM to fall left
    }
}
if state == "jumpingLeft" 
or state == "jumpingRight" //allows transition into left state mid jump
{
    state = "jumpingLeft"
    hspeed = -normalSpeed
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (shoot){
    if direction &gt; 90 and direction &lt; 270{
        instance_create(x,y,obj_bullet)
    }
    
    else if direction &lt; 90 or direction &gt; 270{
        instance_create(x + sprite_width,y,obj_bullet)
    }
    
    
    else if direction == 90{
        if state == "jumpingRight"{
            instance_create(x + sprite_width,y,obj_bullet)
        }
        else if state == "jumpingLeft"{
            instance_create(x,y,obj_bullet)
        }
    }
      
    else if direction == 270{
        if state == "jumpingRight"{
            instance_create(x + sprite_width,y,obj_bullet)
        }
        
        else if state == "jumpingLeft"{
            instance_create(x,y,obj_bullet)
        }
        
        else if state == "standingRight"{
            instance_create(x + sprite_width,y,obj_bullet)
        }
        
        else if state == "standingLeft"{
            instance_create(x,y,obj_bullet)
        }
    }
    shoot = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == "runningRight"
{
state = "standingRight"   //transitions MM from running to standing
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == "runningLeft"
{
    state = "standingLeft"  //transitions MM from running to standing
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>30,74</point>
    <point>74,74</point>
  </PhysicsShapePoints>
</object>
