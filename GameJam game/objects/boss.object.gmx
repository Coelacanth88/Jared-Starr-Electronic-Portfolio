<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>bossLeft</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "standing"//starts off in this state, never returns to it
image_speed = .2
jumpStrength = -20
shockJumpStrength = -25
myGravity = 1.5 
maxFallSpeed = 4
randomJumpTimer = 150
//rechargeTimer = 90 
//shieldBuffer = 5 
//invinTimer = 30
bossCountDown = 60
chargeTimer = 60
randomAttackTimer = 30
stunTimer = 60
punchingTimer = 10
turnTimer = 0
jumpTimer = 0
totalHealth = 100
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//obj_fade.fade = "fadeOut"
with driver instance_destroy()
with obj_hud instance_destroy()
room_goto(creditsRoom)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xx = x, yy = y;

if totalHealth &lt;= 0{
    instance_destroy()
    audio_play_sound(BossDeath, 2, false)
}
turnTimer -=1
randomJumpTimer -=1
if bossCountDown &gt; 0
    bossCountDown -= 1
if randomJumpTimer &lt;= 0
{  
    if state == "runningRight"
    or state == "runningLeft"
    {
        randomNumber = abs(randomize() %100)
        /*if randomNumber &lt; 0
        {
            if state == "runningLeft"
            {
                vspeed = jumpStrength  
                hspeed = 5 
                state = "jumpingLeft"
                //vspeed = jumpStrength   
            }
            if state == "runningRight"
            and jumpTimer &lt;=0
            {
                vspeed = jumpStrength
                hspeed = 5
                state = "jumpingRight"
                //vspeed = jumpStrength
            }
            randomJumpTimer = 150
        }*/
        if randomNumber &gt; 0
        and randomNumber &lt; 41
        {
            randomJumpTimer = 150
        }
        else if randomNumber &gt; 39
        {
            vspeed = jumpStrength
            hspeed = 0
            randomJumpTimer = 150
            state = "shockWaveJump"
        }
    }
}
if state == "standing"
{
    sprite_index = bossLeft
}
if bossCountDown == 0
{
    bossCountDown = -1
    state = "runningLeft"
    //bossCountDown = -1
}
if state == "runningLeft"
{
    sprite_index = bossRunningLeft
    image_speed = .25
    x -=5
    //move_outside_solid((direction+180)%360, 10)
    if abs(driver.x-x) &lt; 50
    {
        randomAttackTimer -= 1
        if randomAttackTimer &lt;=0
        {
            attackRandom = abs(randomize()%100)
            if attackRandom &lt; 61
            {
                state = "punchingLeft"
                randomAttackTimer = 30
            }
            else 
                randomAttackTimer = 30
        }
    }
    if (place_meeting(x-(hspeed)*1.5, y,wall)) //*!place_free
    //and turnTimer &lt;= 0
    { // i'm about to collide right
        //hspeed = 0
        state = "runningRight"
        //turnTimer = 60
    }
}
if state == "runningRight"
{
    sprite_index = bossRunningRight
    image_speed = .25
    x +=5
    
    if distance_to_object(driver) &lt; 50
    {
        randomAttackTimer -= 1
        if randomAttackTimer &lt;=0
        {
            attackRandom = abs(randomize()%100)
            if attackRandom &lt; 61
            {
                state = "punchingRight"
                randomAttackTimer = 30
            }
            else 
                randomAttackTimer = 30
        }
    }
    if (place_meeting(x+(hspeed)*1.5, y,wall))
    //and turnTimer &lt;= 0
    { // i'm about to collide right
        //hspeed = 0
        state = "runningLeft"
        //turnTimer = 60
    }
}
/*if state == "jumpingLeft"
{
    sprite_index = bossJumpingLeft
    //vspeed = jumpStrength
    if (place_meeting(x,y-20,ground))//(!place_free(x, y+5))
    {
        state = "runningLeft"
    }
    if (place_meeting(x-20,y,wall))
        state = "jumpingRight"
}

if state == "jumpingRight"
{
    sprite_index = bossJumpingRight
    //vspeed = jumpStrength
    if (place_meeting(x,y+20, ground))//(!place_free(x, y+5))
    {
        state = "runningRight"
    }
    if (place_meeting(x+20, y, wall))
    {
        state = "jumpingLeft"
    }
}
*/

if state == "punchingRight"
{
    punchingTimer -=1
    speed = 0
    sprite_index = bossAttackRight
    image_speed = .3
    if punchingTimer &lt;=0
    {
        punchingTimer = 10
        state = "runningRight"
    }
}
if state == "punchingLeft"
{
    punchingTimer -=1
    speed = 0
    sprite_index = bossAttackLeft
    image_speed = .3
    if punchingTimer &lt;=0
    {
        punchingTimer = 10
        state = "runningLeft"
    }
}
if state == "shockWaveJump"
{
    //hspeed = 0
    sprite_index = shockwaveJump
    //vspeed = shockJumpStrength
    if (!place_free(x, y+vspeed))//(place_meeting(x,y+vspeed, ground)
    {
        noiseChoice = abs(randomize() %2)
        if noiseChoice = 1
            audio_play_sound(chargeSound,3,0)
        instance_create(x,y+30, shockwave)
        chargeTimer -=1
        if chargeTimer &lt;=0
        move_outside_solid(90,10)
        {
            if driver.x &lt; x
            {
                chargeTimer = 30
                state = "chargeLeft"
            }
            if driver.x &gt; x
            {
                chargeTimer = 30
                state = "chargeRight"
            }
        }
    }
}
if state == "chargeLeft"
{
    sprite_index = chargeLeft
    direction = 180
    image_speed = .5
    speed = 7
    if (place_meeting(x-(hspeed+15), y, wall))//(!place_free(x-5,y))
    {
        state = "stunnedLeft"
    }
}
if state == "chargeRight"
{
    sprite_index = chargeRight
    direction = 0
    speed = 7
    image_speed = .5
    if (place_meeting(x+hspeed, y, wall))//(!place_free(x+5,y))
    {
        state = "stunnedRight"
    }
}
if state == "stunnedRight"
{
    sprite_index = stunnedRight
    speed = 0
    stunTimer -=1
    if stunTimer &lt;=0
    {
        stunTimer = 60
        state = "runningLeft"
    }
}
if state == "stunnedLeft"
{
    sprite_index = stunnedLeft
    speed = 0
    stunTimer -= 1
    if stunTimer &lt;= 0
    {
        stunTimer = 60
        state = "runningRight"
    }
}
vspeed += myGravity
if(!place_free(x, y+vspeed)) 
{ // i'm about to collide up or down
    vspeed = 0
    //move_outside_solid(90,5)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="driver">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if driver.state =="attackingLeft"
or driver.state =="attackingRight"
{
    if driver.image_index = 1
    {
        totalHealth -= 10
        if driver.image_index = 1
        {
            soundChoice = abs(randomize() %8)
            if soundChoice = 1
                audio_play_sound(BossHit,3,false)
            else if soundChoice = 2
                audio_play_sound(bossHit2,3,false)
        
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>totalHealth -= 5
with obj_bullet instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="zombie1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == "punchingRight" or state == "punchingLeft"{
    health -= 15
}

if state == "shockWaveJump"{
    health -= 40
}

if state == "chargeLeft" or state == "chargeRight"{
    health -= 25
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var inc = 350, inc2 = 30, inc3 = 400, inc4 = 40

draw_sprite_ext(sprite_index, image_index, x,y,1,1,0,$ffffff,1)
//draw_text(100,100, state)
draw_healthbar(inc,inc2 ,inc3,inc4, totalHealth, c_black, c_red, c_green, 0, true, true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>19,58</point>
    <point>58,58</point>
  </PhysicsShapePoints>
</object>
