<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>thorntonLeftSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state ="standing" //starts off in this state, never returns to it
mode = 'shielded' //starts of shielded, goes back and forth
image_speed = .2
jumpStrength = -20
myGravity = 1.5 //I wanted him to jump a bit higher and slower than Megaman
maxFallSpeed = 4
jumpTimer = 60 //jumps every two seconds 
rechargeTimer = 90 //shield takes 3 seconds to recharge
shieldBuffer = 5 //shield can take 5 hits before going down
invinTimer = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* goals
1.  Moves left and right at normal pace.  Fires one of mms abilities.
2.  If at wall, turn around and run the other way. 
3.  Jump randomly.  When he jumps he shoots the fireball attack at mm
4.  Needs independent health bar
5.  Explodes when killed.
6. Flip the drawing using the xscale trick to remove the sprite.  Never stands still.
*/
if overlord.expositionTimer &lt;=0
{
    overlord.bossCountDown -= 1 //once the talking is done, it's time to go into bossCountDown
}
invinTimer -=1

if overlord.bossCountDown &gt; 0
{
    state = "standing" //while the countdown is still happening he remains standing
}
if shieldBuffer &gt; 0
{
    mode = 'shielded' //while the shield buffer is higher than 0 he will be shielded
}
if shieldBuffer == 0 
{
    mode = 'unshielded' //when the shieldbuffer drops to 0 the shield goes down and the rechargeTimer starts ticking
    rechargeTimer -= 1
}
if rechargeTimer == 0
{
    shieldBuffer = 5
    rechargeTimer = 90
    mode = "shielded"
    if state == "runningLeft"
        state = "runningLeft"
    else
        state = "runningRight"    //once the rechargeTimer is down the shield fills back up, as does the rechargeTimer.  Mode changes to shielded and appropriate state is chosen
}
if invinTimer &lt;=0
{   
    invinTimer = 0 //keeps invinTimer from turning into a crazy number
}
if state == "damagedLeft"
{
    if (!place_free(x-5, y))
    {
         state = "runningRight" //if he is damaged and he hits a wall he turns and becomes undamaged.  This is to keep him from ghosting through the walls.
    }
    else if invinTimer = 0
    {
        state = "runningLeft"
    }
}
if state == "damagedRight"
{
    if (!place_free(x+5,y))
    {
         state = "runningLeft"
    }
    else if invinTimer = 0
    {
        state = "runningRight"
    }
}
if state == "standing"
{
    sprite_index = thorntonSprite
    image_speed = 0
    image_index = 0
}
if overlord.bossCountDown == 0
{
    state = "runningLeft"
    overlord.bossCountDown = -1 //this changes thornton into his running state, and also drops the counter to -1 to keep him from being stuck in it
}

if state == "jumpingLeft"
{
    sprite_index = thorntonSprite
    if mode == 'shielded'
    {
        image_index = 4
        image_speed = 0
        if (!place_free(x, y+5))
        {
            state = "runningLeft" //this and lines 94, 107, and 116 are the statements that transition thornton from jumping to running
        }
    }
    else
    {
        image_index = 2
        image_speed = 0
     if (!place_free(x, y+5))
        {
           state = "runningLeft"
        }
     }
}
if state == "jumpingRight"
{
    sprite_index = thorntonSprite
    if mode == 'shielded'
    {
        image_index = 3
        image_speed = 0
        if (!place_free(x, y+5))
        {
            state = "runningRight"
        }
    }
    else
    {
        image_index = 1
        image_speed = 0
        if (!place_free(x, y+5))
        {
            state = "runningRight"
        }
    }
}
if jumpTimer &lt;= 0
and state == "runningLeft"
{  
    state = "jumpingLeft"
    vspeed = jumpStrength //when the jump timer hits 0 thornton jumps and then the jump timer resets
    jumpTimer = 60
}
if jumpTimer &lt;= 0
and state == "runningRight"
{  
    state = "jumpingRight"
    vspeed = jumpStrength
    jumpTimer = 60
}
if state == "runningLeft"
{
    if mode == 'shielded'
    {
        sprite_index = thorntonAttackSprite
        image_speed = .2
        hspeed = -5
        jumpTimer -= 1
        if (!place_free(x-5, y)) 
        { // i'm about to collide left
            state = "runningRight"
        }
    }
    if mode == 'unshielded'
    {
        sprite_index = thorntonLeftSprite
        image_speed = .2
        hspeed = -5
        jumpTimer -= 1
        if (!place_free(x-5, y)) 
        { // i'm about to collide left
            state = "runningRight"
        }
    }
}
if state == "runningRight"
{
    if mode == 'shielded'
    {    
        sprite_index = thorntonAttackSprite
        image_speed = .2
        hspeed = 5
        jumpTimer -= 1
        if (!place_free(x+5, y)) 
        { // i'm about to collide right
            state = "runningLeft"
        }
    }
    if mode == 'unshielded'
    {
        sprite_index = thorntonLeftSprite
        image_speed = .2
        hspeed = 5
        jumpTimer -= 1
        if (!place_free(x+5, y)) 
        { // i'm about to collide right
            state = "runningLeft"
        }
    }
}

if state == "dead"
{
    sprite_index = explosionSprite
    image_speed = .04
    vspeed = -1.5
    hspeed = 0
}

vspeed += myGravity

if (!place_free(x, y+vspeed)) 
{ // i'm about to collide up or down
    vspeed = 0
}
if distance_to_object(megaman) &gt; 1500 //if thornton does manage to get through the wall, he will die once he gets too far from megaman
{
    state = "dead"
    overlord.bossHealth = 0
}
if room == bossRoom
and overlord.expositionTimer &lt;= 0
and overlord.bossCountDown &gt;= 0
{
    overlord.healthFillerTimer -=1
    if overlord.healthFillerTimer &lt;= 0 //these statements are used to cause the health bar to fill up at the beginning of the battle.
    and overlord.bossHealth &lt; 9
    {
        overlord.bossHealth += 1
        overlord.healthFillerTimer = 10
        audio_play_sound(healthFillSound, 4, false)
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if shieldBuffer == 0 //only vulnerable once the shield has been depleted
{ 
    if invinTimer == 0
    and state == "runningRight"
    {
        state = "damagedRight"
        invinTimer = 30
        overlord.bossHealth -= 1
    }
    if invinTimer == 0
    and state == "runningLeft"
    {
        state = "damagedLeft"
        invinTimer = 30 //he is invincible for one second after taking a hit
        overlord.bossHealth -= 1
    }
}
if shieldBuffer &gt; 0
{
    shieldBuffer -=1 //every time he is shot his shield drops one
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>density = 1
xscale = 1

if state == "runningLeft"
        draw_sprite_ext(sprite_index, image_index, x, y, xscale, 1, 1, $ffffff, 1)
if state == "runningRight"
        draw_sprite_ext(sprite_index, image_index, x, y, -xscale, 1, 1, $ffffff, 1)
if state == "jumpingLeft"
        draw_sprite_ext(sprite_index, image_index, x, y, xscale, 1, 1, $ffffff, 1)
if state == "jumpingRight"
        draw_sprite_ext(sprite_index, image_index, x, y, xscale, 1, 1, $ffffff, 1)
if state == "damagedRight"
    draw_sprite_ext(sprite_index, image_index, x,y, -xscale, 1, 1, $ffffff, .5)
if state == "damagedLeft"
    draw_sprite_ext(sprite_index, image_index, x,y, xscale, 1, 1, $ffffff, .5)
if state == "dead"
    draw_sprite_ext(sprite_index, image_index, x,y, 1, 1, 1, $3333FF, 1)
if state == "standing"
    draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 1, $ffffff, 1) //all lines are used to draw thornton.  If he is moving right it flips the sprite to save space

//draw_text(x, y+10, invinTimer)
//draw_text(x, y-50, shieldBuffer)
//draw_text(x, y-40, mode)
//draw_text(x, y-30, state)
//draw_text(x, y-20, overlord.bossHealth) //debug lines
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
