<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
1. Keep up with Megaman life gauge  CHANGE IT
2. Create mm bullets  check
3. trigger MM death and restart check
4. deal with level movement
5  count lives check
6.
*/
playerHealth = 9 //players health
bossHealth = 1 //boss health starts at one so it can do fill animation
respawnTimer = 90 //players respawn after death
bulletCount = 0 //how many bullets are on screen
abilityOne = 9 //energy for first ability
abilityTwo = 9 //energy for second ability
grenadeTimer = 390 //this starts here to give it time to finish the 'talk' and countdown
restartTimer = 350 //made for credits screen, lets music play then goes back to menu
instructionTimer = 300 //how long you can see the buttons for
expositionTimer = 300 //how long thornton 'talks' for
healthFillerTimer = 0
bossCountDown = 90 //how long it takes for thorntons health to fill
//distance_to_object function
//create at distance?
//instance_activate_object
//extra powers ic health bar
//max function for health instead of if string
//use draw to repurpose health bar to link to abilities
//draw a rectangle and draw it's alpha
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room != startScreen
or room != creditsRoom //this stiff only needs to happen on the stage or bossRoom
{
    if respawnTimer &lt; 0
    {
        respawnTimer = 0
    }
    if playerHealth &lt;= 0
    and playerHealth &gt; -5 //death condition
    {
        megaman.state = "dead" //switch out to the explosion
        vspeed = 0 //no movement while dying
        //lives -= 1 //subtract a life
        audio_stop_all() //stops music so you can hear the death sound
        audio_stop_sound(mmDamagedSound)  //stops the damage noise from playing at the same time as the death sound
        audio_play_sound(deathSound, 2, false)
        playerHealth = -5  //jumps to the next if statement, otherwise the deathSound will repeat
        megaman.invinTimer = 0
        if room == bossRoom
            {
                expositionTimer = 0 //forces the exposition timer to 0 so thornton doesn't speak again.
            }
    }
    else if playerHealth &lt;= -5
    {
        respawnTimer -=1 //countdown to give you enough time to watch the exposion
        if respawnTimer == 1 //once the explosion is over
        {   
            playerHealth = 9
            room_restart() //restarts the level
            respawnTimer = 90
            if room == bossRoom
            {
                bossHealth = 1
                //expositionTimer = 0
            }
        }
    }
    if bossHealth == 0
    {
        DrThornton.state = "dead"
        audio_stop_all()
        audio_play_sound(deathSound, 2, false)
        bossHealth = -1
        DrThornton.invinTimer = 0 //all of this is the boss death condition
    }
    else if bossHealth == -1
    {
        DrThornton.state = "dead"
        respawnTimer -=1 //countdown to give you enough time to watch the exposion
        if respawnTimer == 1 //once the explosion is over
        {
            room_goto_next() //restarts the level
        }
    }
}
if room == bossRoom
{
    if grenadeTimer &gt; 0
    {
        grenadeTimer -=1
    }
    if grenadeTimer &lt;=0
    {
        instance_create(DrThornton.x, DrThornton.y, grenade) //after the timer ticks down to 0 a grenade is thrown, then the timer starts over
        grenadeTimer = 90
    }
    if DrThornton.state = "dead"
        grenadeTimer = 1000 //no grenade will spawn after thornton dies
}
if room == creditsRoom
{
restartTimer -=1
    if restartTimer &lt;= 0
    {
        room_goto(startScreen)
        instance_destroy() //destroys this copy of the overlord so there won't be two in the next playthrough
    }
}
if room == startScreen
{
    playerHealth = 9
    bossHealth = 1
    respawnTimer = 90
    bulletCount = 0
    abilityOne = 9
    abilityTwo = 9
    grenadeTimer = 390
    restartTimer = 350
    instructionTimer = 300
    expositionTimer = 300
    healthFillerTimer = 0
    bossCountDown = 90 //this resets all the variables any time the start screen rolls around to make it seem like the game has fully restarted
}
if room == bossRoom
and expositionTimer &gt; 0
{
    audio_pause_music() //pauses the music during 'talk'
}
else if expositionTimer == 0
{
    audio_resume_music()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(100, 100, playerHealth)
//draw_text(100, 50, megaman.respawnTimer)
//draw_text(100, 0, megaman.invinTimer)
//draw_text(300, 200, "READY?")
//draw_text(600, 200, DrThornton.invinTimer)
//draw_text(600, 100, bossHealth)
//draw_text( 600, 150, DrThornton.bossCountDown)
//draw_text(300, 50, grenadeTimer) //more debug junk
if room == stage
{
    if instructionTimer &gt; 0
    {
        draw_set_font(font0)
        draw_set_color(c_black)
        draw_text(300, 0, "Controls:")
        draw_text(300, 15, "Arrow Keys: Move")
        draw_text(300, 30, "Up Arrow: Jump")
        draw_text(300, 45, "F key: Fire")
        draw_text(300, 60, "D key: Change abilities")
        instructionTimer -= 1 //this statement draws all of the starting instructions if on the stage
    }
}
if room == bossRoom
{
    if expositionTimer &gt; 0
    {
        draw_set_font(font0)
        draw_set_color($ffff00)
        draw_text(80, 60, " Ah ha! I've sealed your ability use in this")
        draw_text(80, 75, "room Megaman!  You can't use your powers here!")
        draw_text(80, 90, "Without those abilities I'm sure to win! Now, ")
        draw_text(80, 105, "  prepare to face your doom Blue Bomber!")
        expositionTimer -= 1 //really lame speech from the bad guy
    }
    if DrThornton.state == "dead"
    {
        draw_set_font(font0)
        draw_set_color($0000ff)
        draw_text(300, 300, "A winner is you...") //because why not?
    }
}
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bulletCount &lt; 3)
and megaman.mode == 'blue'
{    
    if megaman.state == "shootingLeft" 
    or megaman.state == "shootingRight" 
    {
        instance_create(megaman.x, megaman.y+2, bullet) //this keeps the appearance of firing from the gun
        bulletCount += 1
    }
    if megaman.state == "jumpingLeft"
    or megaman.state == "jumpingRight"
    or megaman.state == "runningRight"
    or megaman.state == "runningLeft"
    {
        instance_create(megaman.x, megaman.y-2, bullet)
        bulletCount += 1 //this keeps track of how many bullets have been fired, so no more than 3 can exist
    }
}
if(bulletCount &lt; 3)
and megaman.mode == 'red'
and abilityTwo &gt; 0
{    
    if megaman.state == "shootingLeft" 
    or megaman.state == "shootingRight" 
    {
        instance_create(megaman.x, megaman.y+2, bullet) //this keeps the appearance of firing from the gun
        bulletCount += 1
    }
    if megaman.state == "jumpingLeft"
    or megaman.state == "jumpingRight"
    or megaman.state == "runningRight"
    or megaman.state == "runningLeft"
    {
        instance_create(megaman.x, megaman.y-2, bullet)
        bulletCount += 1
    }
}
if(bulletCount &lt; 3)
and megaman.mode == 'green'
and abilityOne &gt; 0
{    
    if megaman.state == "shootingLeft" 
    or megaman.state == "shootingRight" 
    {
        instance_create(megaman.x, megaman.y+2, bullet) //this keeps the appearance of firing from the gun
        bulletCount += 1
    }
    if megaman.state == "jumpingLeft"
    or megaman.state == "jumpingRight"
    or megaman.state == "runningRight"
    or megaman.state == "runningLeft"
    {
        instance_create(megaman.x, megaman.y-2, bullet)
        bulletCount += 1
    }
}     
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == startScreen
    room_goto_next() //when you're on the start screen this starts the game
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
