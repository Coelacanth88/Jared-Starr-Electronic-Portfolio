<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>megamanSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mode = 'blue' //megamans default attack
normalSpeed = 7
state = "standingRight"  //naturally spawn facing right because level progression is always to the right
jumpStrength = -20
myGravity = 2  //these two combine to almost perfectly mimic the original MM's jumping prowess
invinTimer = 0 //timer variable for when MM takes damage.  
respawnTimer = 90 //used to give 3 seconds between death and restart
//spawnTimer = 90
maxFallSpeed = 4
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//heavy use of states for megaman.
invinTimer -= 1

if invinTimer &lt;= 0
{
    invinTimer = 0  //keeps invinTimer from reaching crazy number
}
if room == bossRoom
{
    mode = 'blue'  //keeps Megaman in blue state for final fight.
}
if state == "standingRight"  //no movement facing right
{
    sprite_index = megamanSprite //if the sprite isn't changed each time he will stay in a running image
    if mode == 'blue'
    {
        image_index = 0 //these three statements are in all the states, the represent the blue, green, and red modes of megaman.
    }
    if mode == 'green'
    {
        image_index = 8
    }
    if mode == 'red'
    {
        image_index = 16
    }
    speed = 0
}

if state == "standingLeft"  //no movement facing left
{
    sprite_index = megamanSprite
    if mode == 'blue'
    {
        image_index = 1
    }
    if mode == 'green'
    {
        image_index = 9
    }
    if mode == 'red'
    {
        image_index = 17
    }
    speed = 0
}

if state == "shootingLeft"  //no movement shooting left
{
    sprite_index = megamanSprite
    if mode == 'blue'
    {
        image_index = 5
    }
    if mode == 'green'
    {
        image_index = 13
    }
    if mode == 'red'
    {
        image_index = 21
    }
}

if state == "shootingRight"  //no movement shooting right
{
    sprite_index = megamanSprite
    if mode == 'blue'
    {
        image_index = 4
    }
    if mode == 'green'
    {
        image_index = 12
    }
    if mode == 'red'
    {
        image_index = 20
    }
}

if state == "jumpingLeft"  //jumping left
{
    sprite_index = megamanSprite
    if mode == 'blue'
    {
        image_index = 3
    }
    if mode == 'green'
    {
        image_index = 11
    }
    if mode == 'red'
    {
        image_index = 19
    }
}

if state == "jumpingRight"  //jumping right
{
    sprite_index = megamanSprite
    if mode == 'blue'
    {
        image_index = 2
    }
    if mode == 'green'
    {
        image_index = 10
    }
    if mode == 'red'
    {
        image_index = 18
    }
}

if state == "damagedRight"  //hit when facing right
{
    sprite_index = megamanSprite
     if mode == 'blue'
    {
        image_index = 6
    }
    if mode == 'green'
    {
        image_index = 14
    }
    if mode == 'red'
    {
        image_index = 22
    }
    hspeed = -1  //causes megaman to slowly slide to the left when hit moving right
    if invinTimer == 50
    {
        state = "standingRight" //once the invinTimer hits 50 megaman will go back into a standing mode, but is still invincible
    }
}

if state == "damagedLeft" //hit when facing left
{
    sprite_index = megamanSprite
     if mode == 'blue'
    {
        image_index = 7
    }
    if mode == 'green'
    {
        image_index = 15
    }
    if mode == 'red'
    {
        image_index = 23
    }
    hspeed = 1  //causes megaman to slowly slide to the right when hit moving right
    if invinTimer == 50
    {
        state = "standingLeft"
    }
}

if state == "runningLeft" //running to the left
{
    if mode == 'blue'
    {
        sprite_index = runLeftMMSprite
    }
    if mode == 'green'
    {
        sprite_index = grunLeftMMSprite
    }
    if mode == 'red'
    {
        sprite_index = rrunLeftMMSprite
    }
    image_speed = .25
   
}
if state == "runningRight" //running to the right
{
    if mode == 'blue'
    {
        sprite_index = runRightMMSprite
    }
    if mode == 'green'
    {
        sprite_index = grunRightMMSprite
    }
    if mode == 'red'
    {
        sprite_index = rrunRightMMSprite
    }
    image_speed = .25
}

if state == "dead"
{
    sprite_index = explosionSprite
    image_speed = .05
    vspeed = -2 //counters the odd gravity that megaman has when changing into the explosion sprite
    hspeed = 0 //no movement left or right
    audio_stop_sound(shootSound) //keeps the shooting sound from happening when megaman dies
}

if (keyboard_check_pressed(vk_up))  //jump animation depends on which direction your facing
{
    if state == "standingLeft" 
    or state == "runningLeft" 
    or state == "shootingLeft" //if facing left, jump to the left
    {  
        state = "jumpingLeft"
        vspeed = jumpStrength
    }
    if state == "standingRight" 
    or state == "runningRight" 
    or state == "shootingRight" //if facing right, jump to the right
    {  
        state = "jumpingRight"
        vspeed = jumpStrength
    }
}

if(keyboard_check_released(vk_up))
{
    if (state == "jumpingLeft"
    or state == "jumpingRight")  //all of this code allows for the height of the jump to be determined by how long space is pressed. 
    and vspeed &lt;= 0
    {
        vspeed = 0  //if you release space while jumping your vspeed becomes zero UNLESS your vspeed is less than zero.  If falling, nothing happens
    }
}

if (!place_free(x+hspeed, y)) 
{ // i'm about to collide left or right
    move_outside_solid((direction+180)%360, 10) // keeps megaman out of walls based on the direction he is facing when contacting them.
    hspeed = 0
}
if (!place_free(x, y+vspeed)) 
{ // i'm about to collide up or down
    move_outside_solid(90,10)
    vspeed = 0
    //move_outside_solid(90,5)
}
if (!place_free(x, y+5)) { // keep me from sinking into the ground
    if (!keyboard_check_pressed(vk_up) and state == "jumpingLeft") 
    { 
        state = "standingLeft" 
        audio_play_sound(landingSound, 1, false) //plays the landing sound when megaman comes into contact with the ground after being in the jump state
    }
    if (!keyboard_check_pressed(vk_up) and state == "jumpingRight") 
    { 
        state = "standingRight" 
        audio_play_sound(landingSound, 1, false)
    }
}
else 
{
    if state == "standingLeft" 
    { 
        state = "jumpingLeft" 
    }
    if state == "standingRight" 
    { 
        state = "jumpingRight" 
    }

vspeed += myGravity  // obey gravity  
}
hspeed *= .95
if room = bossRoom
{
    if overlord.bossCountDown &gt; 0
    {
        state = "waiting"
    }
    if state == "waiting"
    {
        hspeed = 0
        audio_stop_sound(shootSound)  //268 - 284 are used to keep megaman from moving or shooting while the boss 'talks' and lets him move once the bosscountdown has finished.
        sprite_index = megamanSprite
        image_index = 0
        image_speed = 0
        if overlord.bossCountDown &lt;= 0
            state = "standingRight"   //causes megaman to stare at thornton
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="grenade">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invinTimer &lt;=0
{
    audio_play_sound(mmDamagedSound, 2, false)
    overlord.playerHealth -= 1
    healthBar.image_index += 1
    if state == "standingLeft" 
    or state == "jumpingLeft" 
    or state == "runningLeft" 
    or state == "shootingLeft"  //another long list of possible states
    {
        state = "damagedLeft"
        invinTimer = 75
    }
    if state == "standingRight" 
    or state == "jumpingRight" 
    or state == "runningRight" 
    or state == "shootingRight"  //another long list of possible states
    {
        state = "damagedRight"
        invinTimer = 75
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="energyUp">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mode == 'green'
{
    if overlord.abilityOne == 9 //if energy is full no health should be added
    {
        overlord.abilityOne += 0
    }
    else if overlord.abilityOne == 8 //if only one energy is missing only restore one.  Otherwise the image index will roll over
    {
        overlord.abilityOne +=1
        audio_play_sound(healthFillSound, 4, false)
    }
    else if overlord.abilityOne == 7 //same as above but with two
    {
        overlord.abilityOne += 2
        audio_play_sound(healthFillSound, 4, false)
    }
    else
    {
        overlord.abilityOne += 3 //anything &gt;= 3 will restore 3 energy, the maximum amount.
        audio_play_sound(healthFillSound, 4, false)
    }
}
if mode == 'red'
{
    if overlord.abilityTwo == 9 //if health is full no energy should be added
    {
        overlord.abilityTwo += 0
    }
    else if overlord.abilityTwo == 8 //if only one energy is missing only restore one.  Otherwise the image index will roll over
    {
        overlord.abilityTwo +=1
        audio_play_sound(healthFillSound, 4, false)
    }
    else if overlord.abilityTwo == 7 //same as above but with two
    {
        overlord.abilityTwo += 2
        audio_play_sound(healthFillSound, 4, false)
    }
    else
    {
        overlord.abilityTwo += 3 //anything &gt;= 3 will restore 3 energy, the maximum amount.
        audio_play_sound(healthFillSound, 4, false)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="birdEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invinTimer &lt;=0
{
    audio_play_sound(mmDamagedSound, 2, false)
    overlord.playerHealth -= 1
    healthBar.image_index += 1
    if state == "standingLeft" 
    or state == "jumpingLeft" 
    or state == "runningLeft" 
    or state == "shootingLeft"  //another long list of possible states
    {
        state = "damagedLeft"
        invinTimer = 75
    }
    if state == "standingRight" 
    or state == "jumpingRight" 
    or state == "runningRight" 
    or state == "shootingRight"  //another long list of possible states
    {
        state = "damagedRight"
        invinTimer = 75
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="metEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invinTimer &lt;=0
{
    audio_play_sound(mmDamagedSound, 2, false)
    overlord.playerHealth -= 1
    healthBar.image_index += 1
    if state == "standingLeft" 
    or state == "jumpingLeft" 
    or state == "runningLeft" 
    or state == "shootingLeft"  //another long list of possible states
    {
        state = "damagedLeft"
        invinTimer = 75
    }
    if state == "standingRight" 
    or state == "jumpingRight" 
    or state == "runningRight" 
    or state == "shootingRight"  //another long list of possible states
    {
        state = "damagedRight"
        invinTimer = 75
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="spinningGuy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invinTimer &lt;=0
{
    audio_play_sound(mmDamagedSound, 2, false)
    overlord.playerHealth -= 1
    healthBar.image_index += 1
    if state == "standingLeft" 
    or state == "jumpingLeft" 
    or state == "runningLeft" 
    or state == "shootingLeft"  //another long list of possible states
    {
        state = "damagedLeft"
        invinTimer = 75
    }
    if state == "standingRight" 
    or state == "jumpingRight" 
    or state == "runningRight" 
    or state == "shootingRight"  //another long list of possible states
    {
        state = "damagedRight"
        invinTimer = 75
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="spikes">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>overlord.playerHealth = 0 //instant death for touching spikes
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="healthUp">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if overlord.playerHealth == 9 //if health is full no health should be added
{
    overlord.playerHealth += 0
}
else if overlord.playerHealth == 8 //if only one health is missing only restore one.  Otherwise the image index will roll over
{
    overlord.playerHealth += 1
    healthBar.image_index +=1
    audio_play_sound(healthFillSound, 4, false)
}
else if overlord.playerHealth == 7 //same as above but with two
{
    overlord.playerHealth +=2 //anything &gt;= 3 will restore 3 health, the maximum amount.
    healthBar.image_index +=2
    audio_play_sound(healthFillSound, 4, false)
}
else
{
    overlord.playerHealth += 3 //anything &gt;= 3 will restore 3 health, the maximum amount.
    healthBar.image_index +=3
    audio_play_sound(healthFillSound, 4, false)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="DrThornton">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invinTimer &lt;=0
{
    audio_play_sound(mmDamagedSound, 2, false)
    if DrThornton.mode == 'shielded'  //thornton does more damage when his shield is up.
        overlord.playerHealth -= 2
    else
        overlord.playerHealth -= 1
    if state == "standingLeft" 
    or state == "jumpingLeft" 
    or state == "runningLeft" 
    or state == "shootingLeft"  //another long list of possible states
    {
        state = "damagedLeft"
        invinTimer = 75
    }
    if state == "standingRight" 
    or state == "jumpingRight" 
    or state == "runningRight" 
    or state == "shootingRight"  //another long list of possible states
    {
        state = "damagedRight"
        invinTimer = 75
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == "standingLeft" 
or state == "standingRight" 
or state == "runningLeft" 
or state == "runningRight"
or state == "shootingRight" 
or state == "shootingLeft"  //for comments see keyboard left event
{
    state = "runningRight"
    hspeed = normalSpeed
    direction = 0
    if(place_free(x,y+15))
    {
        state = "jumpingRight"
    }
}
if state == "jumpingLeft" 
or state == "jumpingRight"
{
    state = "jumpingRight"
    hspeed = normalSpeed
    //direction = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == "standingLeft" 
or state == "standingRight" 
or state == "runningLeft" 
or state == "runningRight"
or state == "shootingRight" 
or state == "shootingLeft"   //all possible states for this action
{
    state = "runningLeft" //no matter what you're doing, hitting left will move MM into a left run
    hspeed = -normalSpeed
    direction = 180
    if(place_free(x, y+15))  //if there is no object under MM's feet he will fall
    {
        state = "jumpingLeft"  //moving left off a platform will cause MM to fall left
    }
}
if state == "jumpingLeft" 
or state == "jumpingRight" //allows transition into left state mid jump
{
    state = "jumpingLeft"
    hspeed = -normalSpeed
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto_next() //when megaman jumps down that final hole it takes you to the boss fight
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shade = $ffffff
density = 1
healthBarX = 32
healthBarY = 75

if invinTimer &gt; 0
{
    shade = $ffffff
    density = .5
}    
draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, shade, density)
if room == stage
{
    if overlord.playerHealth &gt; 0
    and mode == 'blue'
    and x &lt; 6252  //this code is all to say that if you get passed a certain part of the stage the health bar sticks instead of following you. 
    {  //the rest just says draw a healthbar and keep it a certain distance from Megaman so it looks like it is permanently in the corner
        draw_sprite_ext(healthBarSprite, overlord.playerHealth, x-280, healthBarY, 1,1,0, shade, 1)
    }
    else if overlord.playerHealth &gt; 0
    and mode == 'blue'
    and x &gt;= 6252
    {
        draw_sprite_ext(healthBarSprite, overlord.playerHealth, 5975, healthBarY, 1,1,0, shade, 1)
    }
    
    if overlord.playerHealth &gt; 0
    and mode == 'green'
    and x &lt; 6252
    {
        draw_sprite_ext(healthBarSprite, overlord.playerHealth, x-280, healthBarY, 1,1,0, shade, 1)
        draw_sprite_ext(healthBarSprite, overlord.abilityOne, x-260, healthBarY, 1,1,0, c_green, 1)
    }
    else if overlord.playerHealth &gt; 0
    and mode == 'green'
    and x &gt;= 6252
    {
        draw_sprite_ext(healthBarSprite, overlord.playerHealth, 5975, healthBarY, 1,1,0, shade, 1)
        draw_sprite_ext(healthBarSprite, overlord.abilityOne, 5995, healthBarY, 1,1,0, c_green, 1)
    }
    
   if overlord.playerHealth &gt; 0
    and mode == 'red'
    and x &lt; 6252
    {
        draw_sprite_ext(healthBarSprite, overlord.playerHealth, x-280, healthBarY, 1,1,0, shade, 1)
        draw_sprite_ext(healthBarSprite, overlord.abilityTwo, x-260, healthBarY, 1,1,0, c_red, 1)
    }
    else if overlord.playerHealth &gt; 0
    and mode == 'red'
    and x &gt;= 6252
    {
        draw_sprite_ext(healthBarSprite, overlord.playerHealth, 5975, healthBarY, 1,1,0, shade, 1)
        draw_sprite_ext(healthBarSprite, overlord.abilityTwo, 5995, healthBarY, 1,1,0, c_red, 1)
    }
}
if room == bossRoom
{
    draw_sprite_ext(healthBarSprite, overlord.playerHealth, healthBarX, healthBarY, 1,1,0, shade, 1)
    if overlord.bossHealth &gt; 0
    {
        draw_sprite_ext(healthBarSprite, overlord.bossHealth, 480, healthBarY, 1,1,0, shade, 1)
    }
}


//draw_text(x, y-30,state)
//draw_text(x, y-50, direction)
//draw_text(x, y-40, mode)
//draw_text(x, y-60, overlord.respawnTimer) all commented out for debug purposes
//draw_text(x, y-20, overlord.bulletCount)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//used to change to shooting animation if megaman isn't moving
if state == "standingRight"
{
    state = "shootingRight"
}
if state == "standingLeft"
{
    state = "shootingLeft"
}
if (invinTimer &lt; 60
or state == "dead")
and overlord.bulletCount &lt;3 //Make sure no sound plays if MM is in the damaged state or if the bullet count is to high
{
    if mode == 'blue'
    {
        audio_play_sound(shootSound, 1, false)
    }
    if mode == 'green'
    and overlord.abilityOne &gt; 0
    {
        audio_play_sound(shootSound, 1, false)
    }
    if mode == 'red'
    and overlord.abilityTwo &gt; 0
    {
        audio_play_sound(shootSound, 1, false) //the above lines are there to make sure no sound is made if you fire nothing with the abilities
    }
}
if mode == 'red'
and overlord.abilityTwo &gt; 0
and overlord.bulletCount &lt; 3
{
    overlord.abilityTwo -= 1 //above and below keep up with how much energy each ability has left
}
if mode == 'green'
and overlord.abilityOne &gt; 0
and overlord.bulletCount &lt; 3
{
    overlord.abilityOne -=1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mode == 'blue'
{
    mode = 'green'
}
else if mode =='green'
{
    mode = 'red'
}
else if mode == 'red'
{
    mode = 'blue'
}
//this whole statement is to allow changes in modes by pressing the d key
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == "shootingRight"
{
    state = "standingRight"
}
if state == "shootingLeft"
{
    state = "standingLeft"
}   //transitions MM from shooting to standing.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == "runningRight"
{
state = "standingRight"   //transitions MM from running to standing
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == "runningLeft"
{
    state = "standingLeft"  //transitions MM from running to standing
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>-1</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>90</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>36,42</point>
    <point>42,42</point>
  </PhysicsShapePoints>
</object>
